// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class AccessPoint {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AccessPoint {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAccessPoint(bb:flatbuffers.ByteBuffer, obj?:AccessPoint):AccessPoint {
  return (obj || new AccessPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAccessPoint(bb:flatbuffers.ByteBuffer, obj?:AccessPoint):AccessPoint {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AccessPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ssid():string|null
ssid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ssid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

primaryChannel():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rssi():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

authMode():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startAccessPoint(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addSsid(builder:flatbuffers.Builder, ssidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ssidOffset, 0);
}

static addPrimaryChannel(builder:flatbuffers.Builder, primaryChannel:number) {
  builder.addFieldInt32(1, primaryChannel, 0);
}

static addRssi(builder:flatbuffers.Builder, rssi:number) {
  builder.addFieldInt32(2, rssi, 0);
}

static addAuthMode(builder:flatbuffers.Builder, authMode:number) {
  builder.addFieldInt32(3, authMode, 0);
}

static endAccessPoint(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAccessPoint(builder:flatbuffers.Builder, ssidOffset:flatbuffers.Offset, primaryChannel:number, rssi:number, authMode:number):flatbuffers.Offset {
  AccessPoint.startAccessPoint(builder);
  AccessPoint.addSsid(builder, ssidOffset);
  AccessPoint.addPrimaryChannel(builder, primaryChannel);
  AccessPoint.addRssi(builder, rssi);
  AccessPoint.addAuthMode(builder, authMode);
  return AccessPoint.endAccessPoint(builder);
}
}
