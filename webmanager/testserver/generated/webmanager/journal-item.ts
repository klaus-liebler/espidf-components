// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class JournalItem {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):JournalItem {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsJournalItem(bb:flatbuffers.ByteBuffer, obj?:JournalItem):JournalItem {
  return (obj || new JournalItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsJournalItem(bb:flatbuffers.ByteBuffer, obj?:JournalItem):JournalItem {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new JournalItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

lastMessageTimestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

messageString():string|null
messageString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
messageString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

messageData():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

messageCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startJournalItem(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addLastMessageTimestamp(builder:flatbuffers.Builder, lastMessageTimestamp:bigint) {
  builder.addFieldInt64(0, lastMessageTimestamp, BigInt('0'));
}

static addMessageString(builder:flatbuffers.Builder, messageStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageStringOffset, 0);
}

static addMessageData(builder:flatbuffers.Builder, messageData:number) {
  builder.addFieldInt32(2, messageData, 0);
}

static addMessageCount(builder:flatbuffers.Builder, messageCount:number) {
  builder.addFieldInt32(3, messageCount, 0);
}

static endJournalItem(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createJournalItem(builder:flatbuffers.Builder, lastMessageTimestamp:bigint, messageStringOffset:flatbuffers.Offset, messageData:number, messageCount:number):flatbuffers.Offset {
  JournalItem.startJournalItem(builder);
  JournalItem.addLastMessageTimestamp(builder, lastMessageTimestamp);
  JournalItem.addMessageString(builder, messageStringOffset);
  JournalItem.addMessageData(builder, messageData);
  JournalItem.addMessageCount(builder, messageCount);
  return JournalItem.endJournalItem(builder);
}
}
