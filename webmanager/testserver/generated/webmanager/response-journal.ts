// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { JournalItem } from '../webmanager/journal-item';


export class ResponseJournal {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResponseJournal {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponseJournal(bb:flatbuffers.ByteBuffer, obj?:ResponseJournal):ResponseJournal {
  return (obj || new ResponseJournal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponseJournal(bb:flatbuffers.ByteBuffer, obj?:ResponseJournal):ResponseJournal {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResponseJournal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

journalItems(index: number, obj?:JournalItem):JournalItem|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new JournalItem()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

journalItemsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startResponseJournal(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addJournalItems(builder:flatbuffers.Builder, journalItemsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, journalItemsOffset, 0);
}

static createJournalItemsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startJournalItemsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endResponseJournal(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResponseJournal(builder:flatbuffers.Builder, journalItemsOffset:flatbuffers.Offset):flatbuffers.Offset {
  ResponseJournal.startResponseJournal(builder);
  ResponseJournal.addJournalItems(builder, journalItemsOffset);
  return ResponseJournal.endResponseJournal(builder);
}
}
