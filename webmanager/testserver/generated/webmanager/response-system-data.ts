// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Mac6 } from '../webmanager/mac6';
import { PartitionInfo } from '../webmanager/partition-info';


export class ResponseSystemData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResponseSystemData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponseSystemData(bb:flatbuffers.ByteBuffer, obj?:ResponseSystemData):ResponseSystemData {
  return (obj || new ResponseSystemData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponseSystemData(bb:flatbuffers.ByteBuffer, obj?:ResponseSystemData):ResponseSystemData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResponseSystemData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

secondsEpoch():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

secondsUptime():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

freeHeap():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

macAddressWifiSta(obj?:Mac6):Mac6|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Mac6()).__init(this.bb_pos + offset, this.bb!) : null;
}

macAddressWifiSoftap(obj?:Mac6):Mac6|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Mac6()).__init(this.bb_pos + offset, this.bb!) : null;
}

macAddressBt(obj?:Mac6):Mac6|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Mac6()).__init(this.bb_pos + offset, this.bb!) : null;
}

macAddressEth(obj?:Mac6):Mac6|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Mac6()).__init(this.bb_pos + offset, this.bb!) : null;
}

macAddressIeee802154(obj?:Mac6):Mac6|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Mac6()).__init(this.bb_pos + offset, this.bb!) : null;
}

chipModel():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

chipFeatures():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

chipRevision():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

chipCores():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

chipTemperature():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

partitions(index: number, obj?:PartitionInfo):PartitionInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new PartitionInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

partitionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startResponseSystemData(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addSecondsEpoch(builder:flatbuffers.Builder, secondsEpoch:number) {
  builder.addFieldInt32(0, secondsEpoch, 0);
}

static addSecondsUptime(builder:flatbuffers.Builder, secondsUptime:number) {
  builder.addFieldInt32(1, secondsUptime, 0);
}

static addFreeHeap(builder:flatbuffers.Builder, freeHeap:number) {
  builder.addFieldInt32(2, freeHeap, 0);
}

static addMacAddressWifiSta(builder:flatbuffers.Builder, macAddressWifiStaOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, macAddressWifiStaOffset, 0);
}

static addMacAddressWifiSoftap(builder:flatbuffers.Builder, macAddressWifiSoftapOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, macAddressWifiSoftapOffset, 0);
}

static addMacAddressBt(builder:flatbuffers.Builder, macAddressBtOffset:flatbuffers.Offset) {
  builder.addFieldStruct(5, macAddressBtOffset, 0);
}

static addMacAddressEth(builder:flatbuffers.Builder, macAddressEthOffset:flatbuffers.Offset) {
  builder.addFieldStruct(6, macAddressEthOffset, 0);
}

static addMacAddressIeee802154(builder:flatbuffers.Builder, macAddressIeee802154Offset:flatbuffers.Offset) {
  builder.addFieldStruct(7, macAddressIeee802154Offset, 0);
}

static addChipModel(builder:flatbuffers.Builder, chipModel:number) {
  builder.addFieldInt32(8, chipModel, 0);
}

static addChipFeatures(builder:flatbuffers.Builder, chipFeatures:number) {
  builder.addFieldInt8(9, chipFeatures, 0);
}

static addChipRevision(builder:flatbuffers.Builder, chipRevision:number) {
  builder.addFieldInt16(10, chipRevision, 0);
}

static addChipCores(builder:flatbuffers.Builder, chipCores:number) {
  builder.addFieldInt8(11, chipCores, 0);
}

static addChipTemperature(builder:flatbuffers.Builder, chipTemperature:number) {
  builder.addFieldFloat32(12, chipTemperature, 0.0);
}

static addPartitions(builder:flatbuffers.Builder, partitionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, partitionsOffset, 0);
}

static createPartitionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPartitionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endResponseSystemData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
