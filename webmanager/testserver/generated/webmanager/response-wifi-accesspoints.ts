// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AccessPoint } from '../webmanager/access-point';


export class ResponseWifiAccesspoints {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResponseWifiAccesspoints {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponseWifiAccesspoints(bb:flatbuffers.ByteBuffer, obj?:ResponseWifiAccesspoints):ResponseWifiAccesspoints {
  return (obj || new ResponseWifiAccesspoints()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponseWifiAccesspoints(bb:flatbuffers.ByteBuffer, obj?:ResponseWifiAccesspoints):ResponseWifiAccesspoints {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResponseWifiAccesspoints()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

hostname():string|null
hostname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostname(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ssidAp():string|null
ssidAp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ssidAp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

accesspoints(index: number, obj?:AccessPoint):AccessPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new AccessPoint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

accesspointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startResponseWifiAccesspoints(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addHostname(builder:flatbuffers.Builder, hostnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, hostnameOffset, 0);
}

static addSsidAp(builder:flatbuffers.Builder, ssidApOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ssidApOffset, 0);
}

static addAccesspoints(builder:flatbuffers.Builder, accesspointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, accesspointsOffset, 0);
}

static createAccesspointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAccesspointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endResponseWifiAccesspoints(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResponseWifiAccesspoints(builder:flatbuffers.Builder, hostnameOffset:flatbuffers.Offset, ssidApOffset:flatbuffers.Offset, accesspointsOffset:flatbuffers.Offset):flatbuffers.Offset {
  ResponseWifiAccesspoints.startResponseWifiAccesspoints(builder);
  ResponseWifiAccesspoints.addHostname(builder, hostnameOffset);
  ResponseWifiAccesspoints.addSsidAp(builder, ssidApOffset);
  ResponseWifiAccesspoints.addAccesspoints(builder, accesspointsOffset);
  return ResponseWifiAccesspoints.endResponseWifiAccesspoints(builder);
}
}
